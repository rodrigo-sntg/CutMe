// Code generated by MockGen. DO NOT EDIT.
// Source: CutMe/internal/application/repository (interfaces: DBClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "CutMe/internal/domain/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDBClient is a mock of DBClient interface.
type MockDBClient struct {
	ctrl     *gomock.Controller
	recorder *MockDBClientMockRecorder
}

// MockDBClientMockRecorder is the mock recorder for MockDBClient.
type MockDBClientMockRecorder struct {
	mock *MockDBClient
}

// NewMockDBClient creates a new mock instance.
func NewMockDBClient(ctrl *gomock.Controller) *MockDBClient {
	mock := &MockDBClient{ctrl: ctrl}
	mock.recorder = &MockDBClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBClient) EXPECT() *MockDBClientMockRecorder {
	return m.recorder
}

// CreateOrUpdateUploadRecord mocks base method.
func (m *MockDBClient) CreateOrUpdateUploadRecord(arg0 entity.UploadRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateUploadRecord", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateUploadRecord indicates an expected call of CreateOrUpdateUploadRecord.
func (mr *MockDBClientMockRecorder) CreateOrUpdateUploadRecord(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateUploadRecord", reflect.TypeOf((*MockDBClient)(nil).CreateOrUpdateUploadRecord), arg0)
}

// CreateUploadRecord mocks base method.
func (m *MockDBClient) CreateUploadRecord(arg0 entity.UploadRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUploadRecord", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUploadRecord indicates an expected call of CreateUploadRecord.
func (mr *MockDBClientMockRecorder) CreateUploadRecord(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUploadRecord", reflect.TypeOf((*MockDBClient)(nil).CreateUploadRecord), arg0)
}

// GetUploadByID mocks base method.
func (m *MockDBClient) GetUploadByID(arg0 string) (*entity.UploadRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUploadByID", arg0)
	ret0, _ := ret[0].(*entity.UploadRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUploadByID indicates an expected call of GetUploadByID.
func (mr *MockDBClientMockRecorder) GetUploadByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUploadByID", reflect.TypeOf((*MockDBClient)(nil).GetUploadByID), arg0)
}

// GetUploads mocks base method.
func (m *MockDBClient) GetUploads(arg0 string) ([]entity.UploadRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUploads", arg0)
	ret0, _ := ret[0].([]entity.UploadRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUploads indicates an expected call of GetUploads.
func (mr *MockDBClientMockRecorder) GetUploads(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUploads", reflect.TypeOf((*MockDBClient)(nil).GetUploads), arg0)
}

// GetUploadsByUserID mocks base method.
func (m *MockDBClient) GetUploadsByUserID(arg0, arg1 string) ([]entity.UploadRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUploadsByUserID", arg0, arg1)
	ret0, _ := ret[0].([]entity.UploadRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUploadsByUserID indicates an expected call of GetUploadsByUserID.
func (mr *MockDBClientMockRecorder) GetUploadsByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUploadsByUserID", reflect.TypeOf((*MockDBClient)(nil).GetUploadsByUserID), arg0, arg1)
}

// UpdateStatus mocks base method.
func (m *MockDBClient) UpdateStatus(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockDBClientMockRecorder) UpdateStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockDBClient)(nil).UpdateStatus), arg0, arg1)
}

// UpdateUploadRecord mocks base method.
func (m *MockDBClient) UpdateUploadRecord(arg0 entity.UploadRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUploadRecord", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUploadRecord indicates an expected call of UpdateUploadRecord.
func (mr *MockDBClientMockRecorder) UpdateUploadRecord(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUploadRecord", reflect.TypeOf((*MockDBClient)(nil).UpdateUploadRecord), arg0)
}
